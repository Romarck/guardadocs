version: '3.8'

services:
  web:
    image: ${DOCKER_REGISTRY_URL:-ghcr.io}/romarck/guardadocs:latest
    restart: always
    env_file:
      - stack.env
    depends_on:
      - db
    networks:
      - guardadocs-network
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - guardadocs-network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web
    networks:
      - guardadocs-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${ADMIN_EMAIL} -d ${DOMAIN} --agree-tos
    deploy:
      replicas: 1
      restart_policy:
        condition: none

volumes:
  postgres_data:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local

networks:
  guardadocs-network:
    driver: overlay
    attachable: true 